{"version":3,"sources":["components/tile/tile.js","components/board/board-state-utils.js","components/board/board.js","components/game-options/game-options.js","components/app/app.js","index.js"],"names":["Tile","src","boardX","boardY","imgX","imgY","xSteps","ySteps","dispatch","divStyle","position","width","height","transform","overflow","top","left","transition","clipPath","imgStyle","style","onMouseDown","type","onTouchStart","onTouchEnd","e","preventDefault","alt","boardReducer","state","action","moveLeft","moveRight","moveUp","moveDown","x","y","getEmptyLocation","emptyX","emptyY","initialY","targetY","shiftEmptyLocationVertically","initialX","targetX","shiftEmptyLocationHorizontally","moveTileFromXY","Error","moveTile","oldX","oldY","newX","newY","map","tile","filter","length","Board","imageWidth","imageHeight","useState","imageIsLoaded","setImageIsLoaded","solvedState","i","push","key","Math","floor","getSolvedState","useReducer","random","shuffleBoard","isSolved","board1","board2","boardsAreEqual","maxWidth","useEffect","eventListener","event","document","addEventListener","removeEventListener","onLoad","opacity","display","color","fontSize","textAlign","GameOptions","playConfig","setPlayConfig","play","useCallback","window","innerWidth","innerHeight","className","onClick","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.73bca5b4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Tile = ({\n  src,\n  boardX,\n  boardY,\n  imgX,\n  imgY,\n  xSteps,\n  ySteps,\n  dispatch,\n}) => {\n  const divStyle = {\n    position: 'absolute',\n    width: 100 / xSteps + '%',\n    height: 100 / ySteps + '%',\n    transform: 'translate(' + 100 * boardX + '%,' + 100 * boardY + '%)',\n    overflow: 'hidden',\n    top: '0',\n    left: '0',\n    transition: 'all .2s',\n    clipPath: 'polygon(2% 2%, 98% 2%, 98% 98%, 2% 98%)',\n  };\n\n  const imgStyle = {\n    position: 'absolute',\n    width: 100 * xSteps + '%',\n    left: -100 * imgX + '%',\n    top: -100 * imgY + '%',\n  };\n\n  return (\n    <div\n      style={divStyle}\n      onMouseDown={() => {\n        dispatch({\n          type: 'CLICK',\n          boardX,\n          boardY,\n        });\n      }}\n      onTouchStart={() => {\n        dispatch({\n          type: 'CLICK',\n          boardX,\n          boardY,\n        });\n      }}\n      onTouchEnd={(e) => {\n        // prevents onMouseDown from being triggered.\n        e.preventDefault();\n      }}\n    >\n      <img src={src} alt=\"Tile\" style={imgStyle} />\n    </div>\n  );\n};\n\nexport default Tile;\n","export function getSolvedState(xSteps, ySteps) {\n  const state = [];\n\n  for (let i = 0; i < xSteps * ySteps - 1; i++) {\n    state.push({\n      key: i,\n      boardX: i % xSteps,\n      boardY: Math.floor(i / xSteps),\n      imgX: i % xSteps,\n      imgY: Math.floor(i / xSteps),\n      xSteps,\n      ySteps,\n    });\n  }\n\n  return state;\n}\n\nexport function shuffleBoard(state) {\n  for (let i = 0; i < 100; i++) {\n    switch (Math.floor(Math.random() * 4)) {\n      case 0:\n        state = moveLeft(state);\n        break;\n      case 1:\n        state = moveRight(state);\n        break;\n      case 2:\n        state = moveUp(state);\n        break;\n      case 3:\n        state = moveDown(state);\n        break;\n      default:\n        throw new Error();\n    }\n  }\n  return state;\n}\n\nexport function boardReducer(state, action) {\n  switch (action.type) {\n    case 'ARROW_LEFT':\n      return moveLeft(state);\n    case 'ARROW_RIGHT':\n      return moveRight(state);\n    case 'ARROW_UP':\n      return moveUp(state);\n    case 'ARROW_DOWN':\n      return moveDown(state);\n    case 'CLICK':\n      return moveTileFromXY(state, action.boardX, action.boardY);\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction moveLeft(state) {\n  const [x, y] = getEmptyLocation(state);\n  if (x < state[0].xSteps - 1) {\n    return moveTile(state, x + 1, y, x, y);\n  } else {\n    return state;\n  }\n}\n\nfunction moveRight(state) {\n  const [x, y] = getEmptyLocation(state);\n  if (x > 0) {\n    return moveTile(state, x - 1, y, x, y);\n  } else {\n    return state;\n  }\n}\n\nfunction moveUp(state) {\n  const [x, y] = getEmptyLocation(state);\n  if (y < state[0].ySteps - 1) {\n    return moveTile(state, x, y + 1, x, y);\n  } else {\n    return state;\n  }\n}\n\nfunction moveDown(state) {\n  const [x, y] = getEmptyLocation(state);\n  if (y > 0) {\n    return moveTile(state, x, y - 1, x, y);\n  } else {\n    return state;\n  }\n}\n\nfunction moveTile(state, oldX, oldY, newX, newY) {\n  return state.map((tile) => {\n    if (tile.boardX === oldX && tile.boardY === oldY) {\n      return { ...tile, boardX: newX, boardY: newY };\n    } else {\n      return tile;\n    }\n  });\n}\n\nfunction moveTileFromXY(state, x, y) {\n  const [emptyX, emptyY] = getEmptyLocation(state);\n  if (emptyX === x) {\n    return shiftEmptyLocationVertically(state, emptyY, y);\n  } else if (emptyY === y) {\n    return shiftEmptyLocationHorizontally(state, emptyX, x);\n  } else {\n    return state;\n  }\n}\n\nfunction shiftEmptyLocationHorizontally(state, initialX, targetX) {\n  while (initialX !== targetX) {\n    if (initialX > targetX) {\n      state = moveRight(state);\n      initialX--;\n    } else {\n      state = moveLeft(state);\n      initialX++;\n    }\n  }\n  return state;\n}\n\nfunction shiftEmptyLocationVertically(state, initialY, targetY) {\n  while (initialY !== targetY) {\n    if (initialY > targetY) {\n      state = moveDown(state);\n      initialY--;\n    } else {\n      state = moveUp(state);\n      initialY++;\n    }\n  }\n  return state;\n}\n\nfunction getEmptyLocation(state) {\n  const { xSteps, ySteps } = state[0];\n  for (let x = 0; x < xSteps; x++) {\n    for (let y = 0; y < ySteps; y++) {\n      if (\n        state.filter((tile) => tile.boardX === x && tile.boardY === y)\n          .length === 0\n      )\n        return [x, y];\n    }\n  }\n}\n\nexport function boardsAreEqual(board1, board2) {\n  for (let i = 0; i < board1.length; i++) {\n    if (\n      board1[i].boardX !== board2[i].boardX ||\n      board1[i].boardY !== board2[i].boardY\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import React, { useReducer, useEffect, useState } from 'react';\nimport Tile from '../tile/tile';\nimport {\n  getSolvedState,\n  boardReducer,\n  shuffleBoard,\n  boardsAreEqual,\n} from './board-state-utils';\n\nconst Board = ({ src, imageWidth, imageHeight, xSteps, ySteps }) => {\n  const [imageIsLoaded, setImageIsLoaded] = useState(false);\n  const solvedState = getSolvedState(xSteps, ySteps);\n  const [state, dispatch] = useReducer(boardReducer, shuffleBoard(solvedState));\n  const isSolved = boardsAreEqual(solvedState, state);\n  const style = {\n    position: 'absolute',\n    width: (100 * imageWidth) / imageHeight + 'vh',\n    maxWidth: '100vw',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n  };\n\n  useEffect(() => {\n    const eventListener = (event) => {\n      if (!isSolved) {\n        switch (event.key) {\n          case 'ArrowLeft':\n            dispatch({ type: 'ARROW_LEFT' });\n            break;\n          case 'ArrowRight':\n            dispatch({ type: 'ARROW_RIGHT' });\n            break;\n          case 'ArrowUp':\n            dispatch({ type: 'ARROW_UP' });\n            break;\n          case 'ArrowDown':\n            dispatch({ type: 'ARROW_DOWN' });\n            break;\n          default:\n        }\n      }\n    };\n\n    document.addEventListener('keydown', eventListener);\n    return () => {\n      document.removeEventListener('keydown', eventListener);\n    };\n  });\n\n  return (\n    <div style={style}>\n      <img\n        src={src}\n        alt=\"Board Background\"\n        onLoad={() => setImageIsLoaded(true)}\n        style={{\n          transition: 'opacity 1s',\n          opacity: isSolved ? '1' : '0.1',\n          width: '100%',\n          display: 'block',\n        }}\n      />\n      {state.map((tile) => (\n        <Tile {...tile} src={src} dispatch={dispatch} />\n      ))}\n      {!imageIsLoaded && (\n        <h1\n          style={{\n            color: 'var(--light-color)',\n            fontSize: '2rem',\n            textAlign: 'center',\n          }}\n        >\n          Loading random image from unsplash.com\n        </h1>\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState, useCallback } from 'react';\nimport './game-options.css';\nimport Board from '../board/board';\n\nconst getWidth = () => {\n  return window.innerWidth > window.innerHeight\n    ? window.innerWidth\n    : window.innerHeight;\n};\n\nconst getHeight = () => {\n  return window.innerWidth > window.innerHeight\n    ? window.innerHeight\n    : window.innerWidth;\n};\n\nconst GameOptions = () => {\n  const [playConfig, setPlayConfig] = useState(null);\n\n  const play = useCallback((xSteps, ySteps) => {\n    const imageWidth = getWidth();\n    const imageHeight = getHeight();\n    setPlayConfig({\n      imageWidth,\n      imageHeight,\n      xSteps,\n      ySteps,\n      src: `https://source.unsplash.com/random/${imageWidth}x${imageHeight}`,\n    });\n  }, []);\n\n  if (playConfig) {\n    return <Board {...playConfig} />;\n  } else {\n    return (\n      <div className=\"game-options\">\n        <h1>Sliding Puzzle</h1>\n        <hr></hr>\n        <button className=\"game-options__btn\" onClick={() => play(3, 3)}>\n          Play 3x3\n        </button>\n        <button className=\"game-options__btn\" onClick={() => play(4, 4)}>\n          Play 4x4\n        </button>\n        <button className=\"game-options__btn\" onClick={() => play(5, 3)}>\n          Play 5x3\n        </button>\n      </div>\n    );\n  }\n};\n\nexport default GameOptions;\n","import React from 'react';\nimport GameOptions from '../game-options/game-options';\n\nconst App = () => {\n  return <GameOptions></GameOptions>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}